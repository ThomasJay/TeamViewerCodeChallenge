openapi: 3.0.3
info:
  title: Teamviewer Coding Challenge - OpenAPI 3.0
  description: |-
    Open API definition for CRUD Coding Challenge


  contact:
    email: thomasjay200@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:8080
tags:
  - name: products
    description: Everything about Products, Create, Read, Update and Delete

  - name: orders
    description: Everything about Orders, Create, Read, Update and Delete

  - name: order-items
    description: Everything about Order Items, Create, Read, Update and Delete
paths:
  /products:
    get:
      tags:
        - products
      summary: Get All Products
      description: Return all Products
      operationId: findAllProducts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

        '400':
          description: Invalid status value

    post:
      tags:
        - products
      summary: Add a new product to the database
      description: Add a new product to the database
      operationId: addProduct
      requestBody:
        description: Create a new product in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '405':
          description: Invalid input


  /products/{productId}:
    get:
      tags:
        - products
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found


    put:
      tags:
        - products
      summary: Update an existing product
      description: Update an existing product by Id
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
        '405':
          description: Validation exception

    delete:
      tags:
        - products
      summary: Deletes a product
      description: delete a product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid product id value

  /orders:
    get:
      tags:
        - orders
      summary: Get All Orders
      description: Return all Orders
      operationId: findAllOrders
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailedOrder'
        '400':
          description: Invalid status value

    post:
      tags:
        - orders
      summary: Add a new order to the store
      description: Add a new order to the store
      operationId: addOrder
      requestBody:
        description: Create a new order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input


  /orders/{orderId}:
    get:
      tags:
        - orders
      summary: Find order by ID
      description: Returns a single order
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedOrder'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found

    put:
      tags:
        - orders
      summary: Update an existing order
      description: Update an existing order by Id
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '405':
          description: Validation exception

    delete:
      tags:
        - orders
      summary: Deletes an order
      description: delete an order
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid order id value

  /order-items:
    get:
      tags:
        - order-items
      summary: Get All Order Items
      description: Return all Order Items
      operationId: findAllOrderItems
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderItem'
        '400':
          description: Invalid status value

    post:
      tags:
        - order-items
      summary: Add a new order item to the store
      description: Add a new order item to the store
      operationId: addOrderItem
      requestBody:
        description: Create a new order item in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '405':
          description: Invalid input

  /order-items/{orderItemId}:
    get:
      tags:
        - order-items
      summary: Find order item by ID
      description: Returns a single order item
      operationId: getOrderItemById
      parameters:
        - name: orderItemId
          in: path
          description: ID of order item to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order Item not found
    put:
      tags:
        - order-items
      summary: Update an existing order item
      description: Update an existing order item by Id
      operationId: updateOrderItem
      parameters:
        - name: orderItemId
          in: path
          description: ID of order item to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent order item in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '405':
          description: Validation exception

    delete:
      tags:
        - order-items
      summary: Deletes an order item
      description: delete an order item
      operationId: deleteOrderItem
      parameters:
        - name: orderItemId
          in: path
          description: ID of order item to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid order item id value




components:
  schemas:

    Order:
      required:
        - status
      type: object
      properties:
        id:
          type: string
          example: b468481a-8254-4c7c-b11d-6866791a55d8
        status:
          type: string
          description: Order Status
          example: completed

    DetailedOrder:
      required:
        - status
      type: object
      properties:
        id:
          type: string
          example: b468481a-8254-4c7c-b11d-6866791a55d8
        status:
          type: string
          description: Order Status
          example: completed
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'



    OrderItem:
      type: object
      properties:
        id:
          type: string
          example: b468481a-8254-4c7c-b11d-6866791a55d8
        orderId:
          type: string
          example: b468481a-8254-4c7c-b11d-6866791a55d8
        productId:
          type: string
          example: b468481a-8254-4c7c-b11d-6866791a55d8
        qtyOrdered:
          type: integer
          example: 1

    Product:
      required:
        - name
        - price
      type: object
      properties:
        id:
          type: string
          example: b468481a-8254-4c7c-b11d-6866791a55d8
        name:
          type: string
          example: Stuff for sale
        price:
          type: number
          description: price of product
          example: 10.75

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
